docker commands

docker create <image name> - create a container from the image it ouputs the container id

docker start <id> - run the container with the given id but it will not display output

docker start -a <id> - here run the container and show the output a stands for attach

docker run <image name> = docker create + docker start -a <id>

docker ps - show all the running docker containers

docker ps --all - show all the container ever created on the system

docker system prune - deletes all the docker cache like history build cache etc

docker logs <id> - logs the output of the container of which the id is supplied

docker stop <id> - stop a running container the signal is sigterm

docker kill <id> - same function but it will forcefully stops the process the signal is sigkill (when the stop command does not work and the container does not stop it will fallback to kill)

docker exec -it <id> <command name> - this will let us execute commands in the container with the given id 

docker exec -it <id> - this command will give us terminal access in the container with the id

How to build a dockerfile

A dockerfile consists of instrution (e=g RUN,FROM,CMD) and argument (alpine,["redis-server"])

So we write instructions here eg of a docker file (see the dockerfile file in this directory)

Writing a docker file == being given a computer with no OS and being told to install chrome

So the first part is to just install the OS in the container 

docker build . - this commands gives everything(since .) to the docker server to build an image from the dockerfile

docker build -t ram2510/<name>:latest . - This will tag the image with the name ram2510/<tag> so now we can run the image with this tag

docker commit -c "<Comand>" <id-of-image> - This will commit the command or attach the command with the id specified and give an ew image with id so now we can use this

port mapping - docker cannot contact the browser directly so we need to setupthe route which will route our request from the browser port to the container port 
docker -p 8080:8080 <image id>

the first port is the browser port port with which we will interact and the next pot is for the conatainer 



